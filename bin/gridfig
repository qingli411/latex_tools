#!/usr/bin/env python3
'''
Qing Li, 20170314
         20170321 added flexiblity to adjust the width and height of each
                  subfigure by either input the aspect ratio or set the width
                  (measured by \linewidth in latex) in the figure list file
         20171025 optionally set the height instead of the width
'''

import sys
import os
import subprocess
import argparse

def main():

    # process the input arguments
    parser = argparse.ArgumentParser(description="""
            This script merges multiple figures in a NCOLUMN x NROW array.
            It reads figure names from an input figure list file and output
            a pdf file. The input figures can be in format of eps or pdf.\n

            The height for each figure can be optionally set in the figure list file
            (a number placed after the figure name, measured by a fraction of
            \linewidth in latex).
            """)
    parser.add_argument('-col', '--col', action='store', dest='ncol',
            metavar='NCOLUMN', required=True, help='Number of columns')
    parser.add_argument('-row', '--row', action='store', dest='nrow',
            metavar='NROW', required=True, help='Number of rows')
    parser.add_argument('-i', '--input', action='store', dest='fname_in',
            metavar='FIGLIST', required=True, help="""List of figures.
            A text file containing the list of figures, should be in the
            left-to-right, top-to-bottom order to be placed in the
            NCOLUMN by NROW grid.""")
    parser.add_argument('-o', '--output', action='store', dest='fname_out',
            metavar='FIGOUT', help="""Output figure name (excluding extension).
            If not given, use the same name as FIGLIST.""")
    parser.add_argument('-ra', '--aspect_ratio', action='store', dest='raspect',
            metavar='RASPECT',
            help='Aspect ratio of each subfigure (width to height)')
    parser.add_argument('-label_off', '--label_off', action='store_true',
            dest='label_off', help='Turn off labels')
    parser.add_argument('--version', action='version', version='%(prog)s: 1.0')
    # parsing arguments and save to args
    args=parser.parse_args()

    # process input arguments
    m = int(args.ncol)
    n = int(args.nrow)
    infile = args.fname_in
    if args.fname_out:
        outfig = args.fname_out
    else:
        figlistname = os.path.basename(args.fname_in)
        outfig, ext = figlistname.split('.')

    if args.raspect:
        ra = args.raspect
    else:
        ra = 0

    l_label_off = args.label_off

    # count figure numbers
    nf = line_count(infile)

    # check the consistency of the input
    if nf != m*n:
        print('The number of figures listed in the file ' + infile + \
                 ' does not equal to NCOLUMN * NROW.\n')
        sys.exit(1)

    # get default figure width (measured in \linewidth in latex)
    default_width = min([0.4, 1/m])
    fwidth  = [default_width for i in range(0, nf)]

    # for optionally passed in height
    luse_height = False
    fheight = fwidth

    # read figure list
    figlist = [None] * nf
    ic = 0
    with open(infile, 'r') as lfile:
        for line in lfile:
            tmp = line.strip()
            tmp2 = tmp.split()
            if len(tmp2) == 1:
                figlist[ic] = tmp2[0]
            elif len(tmp2) == 2:
                figlist[ic] = tmp2[0]
                fheight[ic] = float(tmp2[1])
                luse_height = True
            else:
                print('Error in figure list.\n')
                sys.exit(1)
            ic += 1

    # generate tex file
    curdir = os.getcwd()
    workdir = curdir+'/tmp'
    os.makedirs(workdir, exist_ok=True)
    texfile = workdir+'/'+outfig+'.tex'
    if luse_height:
        tex_tabular_fig(texfile, m, n, figlist, "height", fheight, ra, l_label_off)
    else:
        tex_tabular_fig(texfile, m, n, figlist, "width", fwidth, ra, l_label_off)

    # link input figures to working directory
    for i in range(0, nf):
        figname = figlist[i]
        iprefix = '{:03d}_'.format(i)
        tmp = figname.split('/')
        linkname = iprefix+tmp[-1]
        if os.path.isfile(figname):
            figpath = os.path.abspath(figname)
            cp = subprocess.run(['ln', '-sf', figpath, workdir+'/'+linkname])
            cp.check_returncode()
        else:
            print('Input figure {} not exist.'.format(figname))
            sys.exit(1)

    # compile the tex file
    os.chdir(workdir)
    cp = subprocess.run(['pdflatex', outfig])
    cp.check_returncode()

    # clean up working directory
    cp = subprocess.run(['mv', outfig+'.pdf', curdir])
    cp.check_returncode()
    os.chdir(curdir)
    # remove all files in workdir
    for file in os.scandir(workdir):
        os.remove(file.path)
    # remove workdir
    os.rmdir(workdir)

def line_count(infile):
    '''
    Returns line count for a file
    '''
    nf = 0
    with open(infile, 'r') as lfile:
        for line in lfile:
            nf += 1
    return nf


def tex_tabular_fig(texfile, m, n, figlist, lbsize, fsize, ra, l_label_off):
    '''
    Generate the tex file for tabular figures.
    '''
    import string
    abc = list(string.ascii_lowercase)
    str_head = '\\documentclass{standalone}\n\n' + \
               '\\usepackage{graphicx}\n\n'
    str_doc  = '\n\\begin{document}\n' + \
               '\\setlength{\\tabcolsep}{1pt}\n' + \
               '\\renewcommand{\\arraystretch}{0.8}\n' + \
               '\\begin{{tabular}}{{ *{}{{c}} }}\n'.format(m)
    str_tail = '\\end{tabular}\n\n' + \
               '\\end{document}\n'

    with open(texfile, 'w') as outfile:
        # write file head: documentclass, usepackage
        outfile.write(str_head)
        # write lines: newcommands
        if ra == 0:
            # only set width
            for i in range(0, n):
                for j in range(0, m):
                    k = i*m+j
                    kprefix = '{:03d}_'.format(k)
                    str_fig = '\\fig{}{}'.format(abc[i],abc[j])
                    str_size = '{:3.2f}'.format(fsize[k])
                    tmp = figlist[k].split('/')
                    figname = tmp[-1]
                    str_ncmd = '\\newcommand{' + str_fig + \
                            '}{\\includegraphics['+ lbsize + '=' + str_size + \
                            '\\linewidth]{' + kprefix+figname + '}}'
                    outfile.write(str_ncmd+'\n')
        else:
            # also set height and width by fsize and aspect ratio
            if lbsize == "width":
                fwidth = fsize
                fheight = [x/ra for x in fwidth]
            else:
                fheight = fsize
                fwidth = [x*ra for x in fheight]

            print(fwidth)
            print(fheight)
            for i in range(0, n):
                for j in range(0, m):
                    k = i*m+j
                    kprefix = '{:03d}_'.format(k)
                    str_fig = '\\fig{}{}'.format(abc[i],abc[j])
                    tmp = figlist[k].split('/')
                    figname = tmp[-1]
                    str_width = '{:3.2f}'.format(fwidth[k])
                    str_height = '{:3.2f}'.format(fheight[k])
                    str_ncmd = '\\newcommand{' + str_fig + \
                            '}{\\includegraphics[width=' + str_width + \
                            '\\linewidth,height=' + str_height + \
                            '\\linewidth]{' + kprefix+figname + '}}'
                    outfile.write(str_ncmd+'\n')
        # write lines: document, tabular
        outfile.write(str_doc)
        if l_label_off:
            # write lines: table
            for i in range(0, n):
                # write figures and labels
                str_fig = '\t'
                for j in range(0, m):
                    k = i*m+j
                    str_fig += '\\fig{}{} '.format(abc[i],abc[j])
                    if j != m-1:
                        str_fig += '& '
                    else:
                        # no \\ in the last line
                        if i != n-1:
                            str_fig += '\\\\'
                outfile.write(str_fig+'\n')
        else:
            # write lines: table
            for i in range(0, n):
                # write figures and labels
                str_fig = '\t'
                str_label = '\t'
                for j in range(0, m):
                    k = i*m+j
                    str_fig += '\\fig{}{} '.format(abc[i],abc[j])
                    str_label += '{{\\footnotesize ({})}} '.format(abc[k])
                    if j != m-1:
                        str_fig += '& '
                        str_label += '& '
                    else:
                        str_fig += '\\\\'
                        # no \\ in the last line
                        if i != n-1:
                            str_label += '\\\\'
                outfile.write(str_fig+'\n')
                outfile.write(str_label+'\n')
        # write file tail: end tabular, document
        outfile.write(str_tail)

if __name__ == "__main__":
    main()
