#!/usr/bin/env python3
'''
Qing Li, 20170314
         20170321 added flexiblity to adjust the width and height of each
                  subfigure by either input the aspect ratio or set the width
                  (measured by \linewidth in latex) in the figure list file
'''

def main():
    '''
    This script merges multiple figures in a MxN array. It reads figure
    names from an input figure list file and output a pdf file. The input
    figures can be in format of eps or pdf.

    The width for each figure can be optionally set in the figure list file
    (a number placed after the figure name, measured by a fraction of
    \linewidth in latex)
    '''

    import sys
    import os
    import subprocess

    usage_str = '''Usage:
        gridfig [M] [N] [FigList] [OutputFig] [Aspect ratio (Optional)]
            M: # of columns
            N: # of rows
            FigList: a txt file containing the list of figures, should be
                     in the left-to-right, top-to-bottom order to be placed
                     in the M by N grid
            OutputFig: filename of the output figure (do not include filename
                     extension, .pdf will be added automatically)
            Aspect ratio: optional, the aspect ratio of each subfigure
                          (ratio of width to height), the original aspect
                          ratio is kept if not set
    '''
    # process input arguments
    nargs = len(sys.argv)
    if nargs < 5 or nargs > 6:
        print(usage_str)
        sys.exit(2)
    m = int(sys.argv[1])
    n = int(sys.argv[2])
    infile = sys.argv[3]
    outfig = sys.argv[4]
    if nargs == 6:
        ra = float(sys.argv[5])
    else:
        ra = 0

    # count figure numbers
    nf = line_count(infile)

    # check the consistency of the input
    if nf != m*n:
        print('The number of figures listed in the file ' + infile + \
                 ' does not equal to m*n.\n')
        sys.exit(1)

    # get default figure width (measured in \linewidth in latex)
    default_width = min([0.4, 1/m])
    fwidth  = [default_width for i in range(0, nf)]

    # read figure list
    figlist = [None] * nf
    ic = 0
    with open(infile, 'r') as lfile:
        for line in lfile:
            tmp = line.strip()
            tmp2 = tmp.split()
            if len(tmp2) == 1:
                figlist[ic] = tmp2[0]
            elif len(tmp2) == 2:
                figlist[ic] = tmp2[0]
                fwidth[ic] = float(tmp2[1])
            else:
                print('Error in figure list.\n')
                sys.exit(1)
            ic += 1

    # generate tex file
    curdir = os.getcwd()
    workdir = curdir+'/tmp'
    os.makedirs(workdir, exist_ok=True)
    texfile = workdir+'/'+outfig+'.tex'
    tex_tabular_fig(texfile, m, n, figlist, fwidth, ra)

    # link input figures to working directory
    for i in range(0, nf):
        figname = figlist[i]
        iprefix = '{:03d}_'.format(i)
        tmp = figname.split('/')
        linkname = iprefix+tmp[-1]
        if os.path.isfile(figname):
            figpath = os.path.abspath(figname)
            cp = subprocess.run(['ln', '-sf', figpath, workdir+'/'+linkname])
            cp.check_returncode()
        else:
            print('Input figure {} not exist.'.format(figname))
            sys.exit(1)

    # compile the tex file
    os.chdir(workdir)
    cp = subprocess.run(['pdflatex', outfig])
    cp.check_returncode()

    # clean up working directory
    cp = subprocess.run(['mv', outfig+'.pdf', curdir])
    cp.check_returncode()
    os.chdir(curdir)
    # remove all files in workdir
    for file in os.scandir(workdir):
        os.remove(file.path)
    # remove workdir
    os.rmdir(workdir)

def line_count(infile):
    '''
    Returns line count for a file
    '''
    nf = 0
    with open(infile, 'r') as lfile:
        for line in lfile:
            nf += 1
    return nf


def tex_tabular_fig(texfile, m, n, figlist, fwidth, ra):
    '''
    Generate the tex file for tabular figures.
    '''
    import string
    abc = list(string.ascii_lowercase)
    str_head = '\\documentclass{standalone}\n\n' + \
               '\\usepackage{graphicx}\n\n'
    str_doc  = '\n\\begin{document}\n' + \
               '\\setlength{\\tabcolsep}{1pt}\n' + \
               '\\renewcommand{\\arraystretch}{0.8}\n' + \
               '\\begin{{tabular}}{{ *{}{{c}} }}\n'.format(m)
    str_tail = '\\end{tabular}\n\n' + \
               '\\end{document}\n'
    with open(texfile, 'w') as outfile:
        # write file head: documentclass, usepackage
        outfile.write(str_head)
        # write lines: newcommands
        if ra == 0:
            # only set width
            for i in range(0, n):
                for j in range(0, m):
                    k = i*m+j
                    kprefix = '{:03d}_'.format(k)
                    str_fig = '\\fig{}{}'.format(abc[i],abc[j])
                    str_width = '{:3.2f}'.format(fwidth[k])
                    tmp = figlist[k].split('/')
                    figname = tmp[-1]
                    str_ncmd = '\\newcommand{' + str_fig + \
                            '}{\\includegraphics[width=' + str_width + \
                            '\\linewidth]{' + kprefix+figname + '}}'
                    outfile.write(str_ncmd+'\n')
        else:
            # also set height by width and aspect ratio
            for i in range(0, n):
                for j in range(0, m):
                    k = i*m+j
                    kprefix = '{:03d}_'.format(k)
                    str_fig = '\\fig{}{}'.format(abc[i],abc[j])
                    str_width = '{:3.2f}'.format(fwidth[k])
                    str_height = '{:3.2f}'.format(fwidth[k]/ra)
                    tmp = figlist[k].split('/')
                    figname = tmp[-1]
                    str_ncmd = '\\newcommand{' + str_fig + \
                            '}{\\includegraphics[width=' + str_width + \
                            '\\linewidth,height=' + str_height + \
                            '\\linewidth]{' + kprefix+figname + '}}'
                    outfile.write(str_ncmd+'\n')
        # write lines: document, tabular
        outfile.write(str_doc)
        # write lines: table
        for i in range(0, n):
            # write figures and labels
            str_fig = '\t'
            str_label = '\t'
            for j in range(0, m):
                k = i*m+j
                str_fig += '\\fig{}{} '.format(abc[i],abc[j])
                str_label += '{{\\footnotesize ({})}} '.format(abc[k])
                if j != m-1:
                    str_fig += '& '
                    str_label += '& '
                else:
                    str_fig += '\\\\'
                    # no \\ in the last line
                    if i != n-1:
                        str_label += '\\\\'
            outfile.write(str_fig+'\n')
            outfile.write(str_label+'\n')
        # write file tail: end tabular, document
        outfile.write(str_tail)

if __name__ == "__main__":
    main()
